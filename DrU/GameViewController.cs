// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Drawing;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.AssetsLibrary;

namespace DrU
{
	public partial class GameViewController : UIViewController
	{
		public GameViewController (IntPtr handle) : base (handle)
		{
		}


        public override void DidReceiveMemoryWarning()
        {
            // Releases the view if it doesn't have a superview.
            base.DidReceiveMemoryWarning();

            // Release any cached data, images, etc that aren't in use.
        }

        UIButton cameraButton;
        // used for choosing image (bottom 3)
        UIImagePickerController imagePicker;
        UIButton choosePhotoButton;
        UIImageView imageView;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            // Set the background image
            img_GameBackground.Image = UIImage.FromBundle("mainbackground.jpg");

           // PerformSegue("view_test", this);

            img_GameBackground.Image = UIImage.FromBundle("Default-Portrait.png");

            // Paralax Effect just on the background image
            var xCenterEffect = new UIInterpolatingMotionEffect("center.x", UIInterpolatingMotionEffectType.TiltAlongHorizontalAxis)
            {
                MinimumRelativeValue = new NSNumber(25),
                MaximumRelativeValue = new NSNumber(-25)
            };
            var yCenterEffect = new UIInterpolatingMotionEffect("center.y", UIInterpolatingMotionEffectType.TiltAlongVerticalAxis)
            {
                MinimumRelativeValue = new NSNumber(75),
                MaximumRelativeValue = new NSNumber(-75)
            };
            var effectGroup = new UIMotionEffectGroup
            {
                MotionEffects = new[] { xCenterEffect, yCenterEffect }
            };

            img_GameBackground.AddMotionEffect(effectGroup);
            // End paralax effect


            // camera capture

            btn_camera.TouchUpInside += (sender, e) =>
            {

                TweetStation.Camera.TakePicture(this, (obj) =>
                {
                    var photo = obj.ValueForKey(new NSString("UIImagePickerControllerOriginalImage")) as UIImage;
                    var meta = obj.ValueForKey(new NSString("UIImagePickerControllerMediaMetadata")) as NSDictionary;

                    // This bit of code saves to the application's Documents directory, doesn't save metadata
                    var documentsDirectory = Environment.GetFolderPath
                                              (Environment.SpecialFolder.Personal);
                    string jpgFilename = System.IO.Path.Combine(documentsDirectory, "Photo.jpg");
                    NSData imgData = photo.AsJPEG();
                    NSError err = null;
                    if (imgData.Save(jpgFilename, false, out err))
                    {
                        Console.WriteLine("saved as " + jpgFilename);
                    }
                    else
                    {
                        Console.WriteLine("NOT saved as" + jpgFilename + " because" + err.LocalizedDescription);
                    }


                });
            };

            if (!UIImagePickerController.IsSourceTypeAvailable(UIImagePickerControllerSourceType.Camera))
            {
                btn_camera.SetTitle("No camera", UIControlState.Disabled);
                btn_camera.SetTitleColor(UIColor.Gray, UIControlState.Disabled);
                btn_camera.Enabled = false;
            }

            //end camera capture ------------------------------------------------------

            // Photo Chooser ------------------------------------------------------

            Title = "Choose Photo";
            View.BackgroundColor = UIColor.White;

            imageView = new UIImageView(new RectangleF(30, 200, 300, 300));
            Add(imageView);


            btn_pickImage.TouchUpInside += (s, e) =>
            {
                // create a new picker controller
                imagePicker = new UIImagePickerController();

                // set our source to the photo library
                imagePicker.SourceType = UIImagePickerControllerSourceType.PhotoLibrary;

                // set what media types
                imagePicker.MediaTypes = UIImagePickerController.AvailableMediaTypes(UIImagePickerControllerSourceType.PhotoLibrary);

                imagePicker.FinishedPickingMedia += Handle_FinishedPickingMedia;
                imagePicker.Canceled += Handle_Canceled;

                // show the picker
                NavigationController.PresentModalViewController(imagePicker, true);
            };

            //end photo chooser

            

        }

        // more image choose stuff
        void Handle_Canceled(object sender, EventArgs e)
        {
            Console.WriteLine("picker cancelled");
            imagePicker.DismissModalViewControllerAnimated(true);
        }

        // This is a sample method that handles the FinishedPickingMediaEvent
        protected void Handle_FinishedPickingMedia(object sender, UIImagePickerMediaPickedEventArgs e)
        {
            // determine what was selected, video or image
            bool isImage = false;
            switch (e.Info[UIImagePickerController.MediaType].ToString())
            {
                case "public.image":
                    Console.WriteLine("Image selected");
                    isImage = true;
                    break;

                case "public.video":
                    Console.WriteLine("Video selected");
                    break;
            }

            Console.Write("Reference URL: [" + UIImagePickerController.ReferenceUrl + "]");

            // get common info (shared between images and video)
            NSUrl referenceURL = e.Info[new NSString("UIImagePickerControllerReferenceUrl")] as NSUrl;
            if (referenceURL != null)
                Console.WriteLine(referenceURL.ToString());

            // if it was an image, get the other image info
            if (isImage)
            {

                // get the original image
                UIImage originalImage = e.Info[UIImagePickerController.OriginalImage] as UIImage;
                if (originalImage != null)
                {
                    // do something with the image
                    Console.WriteLine("got the original image");
                    imageView.Image = originalImage;
                }

                // get the edited image
                UIImage editedImage = e.Info[UIImagePickerController.EditedImage] as UIImage;
                if (editedImage != null)
                {
                    // do something with the image
                    Console.WriteLine("got the edited image");
                    imageView.Image = editedImage;
                }

                //- get the image metadata
                NSDictionary imageMetadata = e.Info[UIImagePickerController.MediaMetadata] as NSDictionary;
                if (imageMetadata != null)
                {
                    // do something with the metadata
                    Console.WriteLine("got image metadata");
                }

            }
            // if it's a video
            else
            {
                // get video url
                NSUrl mediaURL = e.Info[UIImagePickerController.MediaURL] as NSUrl;
                if (mediaURL != null)
                {
                    //
                    Console.WriteLine(mediaURL.ToString());
                }
            }

            // dismiss the picker
            imagePicker.DismissModalViewControllerAnimated(true);
        }


        // end camera image chooser

        public override bool PrefersStatusBarHidden()
        {
            return true;
        }



        partial void btn_back_Activated(UIBarButtonItem sender)
        {
        }
	}
}
